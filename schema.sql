-- ========= SCHEMA: Restaurant App on Supabase (SAFE, no storage DDL) =========

-- Extensions
create extension if not exists "uuid-ossp";
create extension if not exists "pgcrypto";

-- ============ Tables ============
create table if not exists public.categories(
  id           text primary key,
  name         text not null,
  sort         int  default 0,
  created_at   timestamptz default now()
);
create unique index if not exists categories_name_unique
on public.categories ((lower(name)));

create table if not exists public.menu_items(
  id            uuid primary key default gen_random_uuid(),
  name          text not null,
  "desc"        text,
  price         numeric(12,2) not null default 0,
  img           text,
  cat_id        text references public.categories(id) on delete set null,
  available     boolean not null default true,
  fresh         boolean not null default false,
  rating_avg    numeric(4,2) not null default 0,
  rating_count  int not null default 0,
  created_at    timestamptz default now()
);

create table if not exists public.orders(
  id           bigint generated by default as identity primary key,
  order_name   text,
  phone        text,
  table_no     text,
  notes        text,
  total        numeric(12,2) not null default 0,
  created_at   timestamptz default now()
);

-- حالة الطلب + قيودها
alter table public.orders
  add column if not exists status text not null default 'new';

do $$
begin
  if not exists (
    select 1
    from information_schema.table_constraints
    where table_schema = 'public'
      and table_name   = 'orders'
      and constraint_name = 'orders_status_check'
  ) then
    alter table public.orders
      add constraint orders_status_check
      check (status in ('new','received','preparing','delivered','canceled'));
  end if;
end$$;

alter table public.orders
  add column if not exists discount_pct numeric(5,2)  default 0,
  add column if not exists discount     numeric(12,2) default 0,
  add column if not exists additions    jsonb          default '[]'::jsonb;

create table if not exists public.order_items(
  id         bigint generated by default as identity primary key,
  order_id   bigint not null references public.orders(id) on delete cascade,
  item_id    uuid references public.menu_items(id) on delete set null,
  name       text not null,
  price      numeric(12,2) not null default 0,
  qty        int not null default 1
);

create table if not exists public.ratings(
  id         bigint generated by default as identity primary key,
  item_id    uuid not null references public.menu_items(id) on delete cascade,
  stars      int  not null check (stars between 1 and 5),
  created_at timestamptz default now()
);

create table if not exists public.reservations(
  id                 bigint generated by default as identity primary key,
  name               text not null,
  phone              text,
  date               timestamptz not null,
  people             int not null default 1,
  kind               text not null default 'table', -- table / event
  table_no           text,
  duration_minutes   int  not null default 90,
  notes              text,
  created_at         timestamptz default now()
);

-- حالة الحجز + قيدها
alter table public.reservations
  add column if not exists status text not null default 'new';

do $$
begin
  if not exists (
    select 1 from information_schema.table_constraints
    where table_schema='public' and table_name='reservations' and constraint_name='reservations_status_check'
  ) then
    alter table public.reservations
      add constraint reservations_status_check
      check (status in ('new','confirmed','seated','done','canceled'));
  end if;
end$$;

create table if not exists public.admins(
  user_id uuid primary key -- references auth.users(id)
);

-- Seed initial admin (idempotent) — قبل تفعيل RLS
-- ✳️ غيّر هذا UUID ليطابق حسابك الإداري الحقيقي
do $$
begin
  if not exists (select 1 from public.admins where user_id = '2c211a23-fa5a-491f-8fb9-90778b36f8df'::uuid) then
    insert into public.admins (user_id) values ('2c211a23-fa5a-491f-8fb9-90778b36f8df'::uuid);
  end if;
end$$;

-- ============ RLS ============
alter table public.categories    enable row level security;
alter table public.menu_items    enable row level security;
alter table public.orders        enable row level security;
alter table public.order_items   enable row level security;
alter table public.ratings       enable row level security;
alter table public.reservations  enable row level security;
alter table public.admins        enable row level security;

-- Helper: is_admin(uid)
create or replace function public.is_admin(u uuid)
returns boolean
language plpgsql
security definer
set search_path = public
as $$
begin
  return exists(select 1 from public.admins a where a.user_id = u);
end;
$$;
grant execute on function public.is_admin(uuid) to authenticated;

-- ============ Policies ============

-- إسقاط سياسات قديمة
drop policy if exists "read categories"           on public.categories;
drop policy if exists "auth read categories"      on public.categories;
drop policy if exists "admins manage categories"  on public.categories;
drop policy if exists "auth manage categories"    on public.categories;

drop policy if exists "read menu"                 on public.menu_items;
drop policy if exists "auth read menu"            on public.menu_items;
drop policy if exists "admins manage menu"        on public.menu_items;
drop policy if exists "auth manage menu"          on public.menu_items;

drop policy if exists "insert orders (anon+auth)" on public.orders;
drop policy if exists "public insert orders"      on public.orders;
drop policy if exists "anon insert orders"        on public.orders;
drop policy if exists "read orders (auth)"        on public.orders;
drop policy if exists "update orders (auth)"      on public.orders;
drop policy if exists "delete orders (auth)"      on public.orders;
drop policy if exists "admins read orders"        on public.orders;
drop policy if exists "admins update orders"      on public.orders;
drop policy if exists "admins delete orders"      on public.orders;
drop policy if exists "auth read orders"          on public.orders;
drop policy if exists "auth update orders"        on public.orders;
drop policy if exists "auth delete orders"        on public.orders;

drop policy if exists "insert order_items (anon+auth)" on public.order_items;
drop policy if exists "public insert order_items"      on public.order_items;
drop policy if exists "anon insert order_items"        on public.order_items;
drop policy if exists "read order_items (auth)"        on public.order_items;
drop policy if exists "update order_items (auth)"      on public.order_items;
drop policy if exists "delete order_items (auth)"      on public.order_items;
drop policy if exists "admins read order_items"        on public.order_items;
drop policy if exists "admins update order_items"      on public.order_items;
drop policy if exists "admins delete order_items"      on public.order_items;
drop policy if exists "auth read order_items"          on public.order_items;
drop policy if exists "auth update order_items"        on public.order_items;
drop policy if exists "auth delete order_items"        on public.order_items;

drop policy if exists "read ratings (public)"     on public.ratings;
drop policy if exists "public read ratings"       on public.ratings;
drop policy if exists "auth read ratings"         on public.ratings;
drop policy if exists "insert ratings (anon+auth)"on public.ratings;
drop policy if exists "public insert ratings"     on public.ratings;
drop policy if exists "anon insert ratings"       on public.ratings;
drop policy if exists "delete ratings (auth)"     on public.ratings;  -- NEW: لإعادة الإنشاء نظيفًا
drop policy if exists "update ratings (auth)"     on public.ratings;  -- لو رغبت بتعديل لاحقًا

drop policy if exists "insert reservations (anon+auth)" on public.reservations;
drop policy if exists "public insert reservations"      on public.reservations;
drop policy if exists "anon insert reservations"        on public.reservations;
drop policy if exists "read reservations (auth)"        on public.reservations;
drop policy if exists "update reservations (auth)"      on public.reservations;
drop policy if exists "delete reservations (auth)"      on public.reservations;
drop policy if exists "admins read reservations"        on public.reservations;
drop policy if exists "admins update reservations"      on public.reservations;
drop policy if exists "admins delete reservations"      on public.reservations;
drop policy if exists "auth read reservations"          on public.reservations;
drop policy if exists "auth update reservations"        on public.reservations;
drop policy if exists "auth delete reservations"        on public.reservations;

drop policy if exists "self read admin row"       on public.admins;
drop policy if exists "admins manage admins"      on public.admins;

-- سياسات نهائية

-- الكتالوج: قراءة عامة
create policy "read categories" on public.categories
for select using (true);

create policy "read menu" on public.menu_items
for select using (true);

-- الكتالوج: الإدارة لأي مستخدم مُسجّل (authenticated)
create policy "auth manage categories" on public.categories
for all to authenticated
using (true)
with check (true);

create policy "auth manage menu" on public.menu_items
for all to authenticated
using (true)
with check (true);

-- الطلبات
create policy "insert orders (anon+auth)" on public.orders
for insert to anon, authenticated
with check (true);

create policy "read orders (auth)" on public.orders
for select to authenticated using (true);

create policy "update orders (auth)" on public.orders
for update to authenticated using (true) with check (true);

create policy "delete orders (auth)" on public.orders
for delete to authenticated using (true);

-- عناصر الطلب
create policy "insert order_items (anon+auth)" on public.order_items
for insert to anon, authenticated with check (true);

create policy "read order_items (auth)" on public.order_items
for select to authenticated using (true);

create policy "update order_items (auth)" on public.order_items
for update to authenticated using (true) with check (true);

create policy "delete order_items (auth)" on public.order_items
for delete to authenticated using (true);

-- التقييمات
create policy "read ratings (public)" on public.ratings
for select using (true);

create policy "insert ratings (anon+auth)" on public.ratings
for insert to anon, authenticated with check (true);

-- ✅ السماح بالحذف (اختياري: يمكن تقييده للمدراء فقط بتبديل الشرط)
-- حالياً: أي مستخدم مُسجّل يستطيع الحذف عبر الـRLS
-- إن أردتها للمدراء فقط: استبدل (true) بـ public.is_admin(auth.uid())
create policy "delete ratings (auth)" on public.ratings
for delete to authenticated
using (true);

-- (اختياري) إن رغبت بتعديل التقييمات مستقبلاً
create policy "update ratings (auth)" on public.ratings
for update to authenticated using (true) with check (true);

-- الحجوزات
create policy "insert reservations (anon+auth)" on public.reservations
for insert to anon, authenticated with check (true);

create policy "read reservations (auth)" on public.reservations
for select to authenticated using (true);

create policy "update reservations (auth)" on public.reservations
for update to authenticated using (true) with check (true);

create policy "delete reservations (auth)" on public.reservations
for delete to authenticated using (true);

-- جدول المدراء (نُبقيه للمرونة مستقبلاً)
create policy "self read admin row" on public.admins
for select to authenticated using (user_id = auth.uid());

create policy "admins manage admins" on public.admins
for all to authenticated
using (public.is_admin(auth.uid()))
with check (public.is_admin(auth.uid()));

-- ============ Rating triggers (recalc on insert/update/delete) ============

-- احذف الآلية القديمة إن وُجدت
drop trigger if exists trg_bump_menu_rating on public.ratings;
drop function if exists public.bump_menu_rating();

-- دالة مساعدة لإعادة احتساب تقييم الصنف بالكامل
create or replace function public.recalc_menu_rating(_item uuid)
returns void
language plpgsql
security definer
set search_path = public
as $$
begin
  update public.menu_items mi
  set rating_avg   = coalesce( (select round(avg(r.stars)::numeric, 2) from public.ratings r where r.item_id = _item), 0 ),
      rating_count = coalesce( (select count(*) from public.ratings r where r.item_id = _item), 0 )
  where mi.id = _item;
end;
$$;

-- بعد الإدراج
create or replace function public.trg_ratings_ai()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  perform public.recalc_menu_rating(new.item_id);
  return new;
end;
$$;
drop trigger if exists trg_ratings_ai on public.ratings;
create trigger trg_ratings_ai
after insert on public.ratings
for each row execute function public.trg_ratings_ai();

-- بعد التعديل (لو تغيّرت النجوم أو تغيّر الصنف)
create or replace function public.trg_ratings_au()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  if new.item_id is distinct from old.item_id then
    perform public.recalc_menu_rating(old.item_id);
  end if;
  perform public.recalc_menu_rating(new.item_id);
  return new;
end;
$$;
drop trigger if exists trg_ratings_au on public.ratings;
create trigger trg_ratings_au
after update on public.ratings
for each row execute function public.trg_ratings_au();

-- بعد الحذف
create or replace function public.trg_ratings_ad()
returns trigger
language plpgsql
security definer
set search_path = public
as $$
begin
  perform public.recalc_menu_rating(old.item_id);
  return old;
end;
$$;
drop trigger if exists trg_ratings_ad on public.ratings;
create trigger trg_ratings_ad
after delete on public.ratings
for each row execute function public.trg_ratings_ad();

-- ============ Helpful Indexes ============
create index if not exists idx_categories_sort
  on public.categories(sort);

create index if not exists idx_menu_items_available_true_created_at
  on public.menu_items(created_at desc)
  where available = true;

create index if not exists idx_menu_items_created_at
  on public.menu_items(created_at desc);

create index if not exists idx_menu_items_cat
  on public.menu_items(cat_id);

create index if not exists idx_orders_created_at
  on public.orders(created_at desc);

create index if not exists idx_orders_status_created_at
  on public.orders(status, created_at desc);

create index if not exists idx_order_items_oid  on public.order_items(order_id);
create index if not exists idx_ratings_item     on public.ratings(item_id);
create index if not exists idx_ratings_item_created
  on public.ratings(item_id, created_at desc);

create index if not exists idx_reservations_dt  on public.reservations(date);
create index if not exists idx_reservations_status_date
  on public.reservations(status, date);

-- ============ Soft Data-Quality Checks ============
do $$
begin
  if not exists (
    select 1 from information_schema.table_constraints
    where table_schema='public' and table_name='menu_items' and constraint_name='menu_items_price_nonneg'
  ) then
    alter table public.menu_items
      add constraint menu_items_price_nonneg check (price >= 0);
  end if;

  if not exists (
    select 1 from information_schema.table_constraints
    where table_schema='public' and table_name='order_items' and constraint_name='order_items_qty_nonneg'
  ) then
    alter table public.order_items
      add constraint order_items_qty_nonneg check (qty >= 1);
  end if;
end$$;

-- ============ IMG NORMALIZATION (supports images & menu-images) ============
create or replace function public.image_public_url(_img text)
returns text
language plpgsql
immutable
as $$
declare
  s        text;
  _fallback constant text :=
    'https://images.unsplash.com/photo-1543352634-8730b1c3c34b?q=80&w=1200&auto=format&fit=crop';
  _host     constant text := 'https://nyfgbtkaijmlyooqljun.supabase.co'; -- عدّل إن تغيّر مضيف مشروعك
  _bucket   text;
  _path     text;
begin
  s := coalesce(btrim(_img), '');
  if s = '' then
    return _fallback;
  end if;

  -- جاهز: http/https أو data/blob
  if s ~* '^(https?://|data:|blob:)' then
    return s;
  end if;

  -- روابط storage العامة (images أو menu-images) جزئية أو بدون المضيف
  if s ~* '^/?storage/v1/object/public/(images|menu-images)/' then
    s := regexp_replace(s, '^/+','');
    return _host || '/' || s;
  end if;

  -- استنتاج اسم البكت من البادئة، وإلا الافتراضي images
  _bucket :=
    case
      when s ~* '^(menu-images)/' then 'menu-images'
      when s ~* '^(images)/'      then 'images'
      else 'images'
    end;

  -- إزالة البادئة وأي شرطة مائلة زائدة
  _path := regexp_replace(s, '^(images|menu-images)/', '');
  _path := regexp_replace(_path, '^/+','');

  return _host || '/storage/v1/object/public/' || _bucket || '/' || _path;
end;
$$;

create or replace function public.normalize_menu_item_image()
returns trigger
language plpgsql
as $$
begin
  new.img := public.image_public_url(new.img);
  return new;
end;
$$;

drop trigger if exists trg_menu_items_norm_img_ins on public.menu_items;
create trigger trg_menu_items_norm_img_ins
before insert on public.menu_items
for each row execute function public.normalize_menu_item_image();

drop trigger if exists trg_menu_items_norm_img_upd on public.menu_items;
create trigger trg_menu_items_norm_img_upd
before update of img on public.menu_items
for each row execute function public.normalize_menu_item_image();

-- Backfill: تطبيع أي صور موجودة مسبقًا
update public.menu_items
set img = public.image_public_url(img)
where img is distinct from public.image_public_url(img);

-- ============ RPC: create_order_with_items ============
create or replace function public.create_order_with_items(
  _order_name text,
  _phone      text,
  _table_no   text,
  _notes      text,
  _items      jsonb
) returns bigint
language plpgsql
security definer
set search_path = public
as $$
declare
  _order_id bigint;
begin
  if _items is null or jsonb_typeof(_items) <> 'array' or jsonb_array_length(_items) = 0 then
    raise exception 'EMPTY_CART';
  end if;

  insert into public.orders(order_name, phone, table_no, notes, total)
  values (
    coalesce(_order_name,''), coalesce(_phone,''), coalesce(_table_no,''), coalesce(_notes,'' ),
    coalesce((
      select sum( greatest(coalesce((it->>'price')::numeric,0),0)
                  * greatest(coalesce((it->>'qty')::int,1),1) )
      from jsonb_array_elements(_items) it
    ), 0)
  )
  returning id into _order_id;

  insert into public.order_items(order_id, item_id, name, price, qty)
  select _order_id,
         nullif(it->>'id','')::uuid,
         left(coalesce(it->>'name',''), 200),
         greatest(coalesce((it->>'price')::numeric,0), 0),
         greatest(coalesce((it->>'qty')::int,1), 1)
  from jsonb_array_elements(_items) it;

  return _order_id;
end $$;

grant execute on function public.create_order_with_items(text,text,text,text,jsonb) to anon, authenticated;

-- ============ RPC: Ratings Admin Helpers (NEW) ============

-- تنظيف التقييمات لصنف معيّن
drop function if exists public.clear_item_ratings(uuid);
create or replace function public.clear_item_ratings(_item uuid)
returns integer
language plpgsql
security definer
set search_path = public
as $$
declare
  _uid uuid := auth.uid();
  _n   integer;
begin
  if not public.is_admin(_uid) then
    raise exception 'FORBIDDEN';
  end if;

  delete from public.ratings r where r.item_id = _item;
  get diagnostics _n = row_count;

  perform public.recalc_menu_rating(_item);
  return _n;
end;
$$;
grant execute on function public.clear_item_ratings(uuid) to authenticated;

-- حذف كل التقييمات وتصفير الحقول على الأصناف
drop function if exists public.clear_all_ratings();
create or replace function public.clear_all_ratings()
returns integer
language plpgsql
security definer
set search_path = public
as $$
declare
  _uid uuid := auth.uid();
  _n   integer;
begin
  if not public.is_admin(_uid) then
    raise exception 'FORBIDDEN';
  end if;

  delete from public.ratings;
  get diagnostics _n = row_count;

  -- أسرع من استدعاء التريجر صفًا بصف
  update public.menu_items
  set rating_avg = 0, rating_count = 0
  where rating_avg <> 0 or rating_count <> 0;

  return _n;
end;
$$;
grant execute on function public.clear_all_ratings() to authenticated;

-- ============ Grants ============
grant usage on schema public to anon, authenticated;
grant select on all tables in schema public to anon, authenticated;
grant insert on all tables in schema public to anon, authenticated;
grant update on all tables in schema public to authenticated;
grant delete on all tables in schema public to authenticated;

alter default privileges in schema public
grant select on tables to anon, authenticated;
alter default privileges in schema public
grant insert on tables to anon, authenticated;
alter default privileges in schema public
grant update, delete on tables to authenticated;

-- ============ Realtime Publication ============
do $$
begin
  if not exists (select 1 from pg_publication where pubname = 'supabase_realtime') then
    create publication supabase_realtime;
  end if;
end$$;

do $$
begin
  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='categories'
  ) then
    alter publication supabase_realtime add table public.categories;
  end if;

  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='menu_items'
  ) then
    alter publication supabase_realtime add table public.menu_items;
  end if;

  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='orders'
  ) then
    alter publication supabase_realtime add table public.orders;
  end if;

  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='order_items'
  ) then
    alter publication supabase_realtime add table public.order_items;
  end if;

  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='ratings'
  ) then
    alter publication supabase_realtime add table public.ratings;
  end if;

  if not exists (
    select 1 from pg_publication_tables
    where pubname='supabase_realtime' and schemaname='public' and tablename='reservations'
  ) then
    alter publication supabase_realtime add table public.reservations;
  end if;
end$$;

-- ========= END =========
